/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Medic } from "./Medic";
import { MedicCountArgs } from "./MedicCountArgs";
import { MedicFindManyArgs } from "./MedicFindManyArgs";
import { MedicFindUniqueArgs } from "./MedicFindUniqueArgs";
import { CreateMedicArgs } from "./CreateMedicArgs";
import { UpdateMedicArgs } from "./UpdateMedicArgs";
import { DeleteMedicArgs } from "./DeleteMedicArgs";
import { MedicService } from "../medic.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Medic)
export class MedicResolverBase {
  constructor(
    protected readonly service: MedicService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Medic",
    action: "read",
    possession: "any",
  })
  async _medicsMeta(
    @graphql.Args() args: MedicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Medic])
  @nestAccessControl.UseRoles({
    resource: "Medic",
    action: "read",
    possession: "any",
  })
  async medics(@graphql.Args() args: MedicFindManyArgs): Promise<Medic[]> {
    return this.service.medics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Medic, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Medic",
    action: "read",
    possession: "own",
  })
  async medic(
    @graphql.Args() args: MedicFindUniqueArgs
  ): Promise<Medic | null> {
    const result = await this.service.medic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Medic)
  @nestAccessControl.UseRoles({
    resource: "Medic",
    action: "create",
    possession: "any",
  })
  async createMedic(@graphql.Args() args: CreateMedicArgs): Promise<Medic> {
    return await this.service.createMedic({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Medic)
  @nestAccessControl.UseRoles({
    resource: "Medic",
    action: "update",
    possession: "any",
  })
  async updateMedic(
    @graphql.Args() args: UpdateMedicArgs
  ): Promise<Medic | null> {
    try {
      return await this.service.updateMedic({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Medic)
  @nestAccessControl.UseRoles({
    resource: "Medic",
    action: "delete",
    possession: "any",
  })
  async deleteMedic(
    @graphql.Args() args: DeleteMedicArgs
  ): Promise<Medic | null> {
    try {
      return await this.service.deleteMedic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

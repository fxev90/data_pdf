/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Medic } from "@prisma/client";

export class MedicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MedicCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicCountArgs>
  ): Promise<number> {
    return this.prisma.medic.count(args);
  }

  async medics<T extends Prisma.MedicFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicFindManyArgs>
  ): Promise<Medic[]> {
    return this.prisma.medic.findMany(args);
  }
  async medic<T extends Prisma.MedicFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicFindUniqueArgs>
  ): Promise<Medic | null> {
    return this.prisma.medic.findUnique(args);
  }
  async createMedic<T extends Prisma.MedicCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicCreateArgs>
  ): Promise<Medic> {
    return this.prisma.medic.create<T>(args);
  }
  async updateMedic<T extends Prisma.MedicUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicUpdateArgs>
  ): Promise<Medic> {
    return this.prisma.medic.update<T>(args);
  }
  async deleteMedic<T extends Prisma.MedicDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicDeleteArgs>
  ): Promise<Medic> {
    return this.prisma.medic.delete(args);
  }
}
